













	










// defining multiple OneToMany relationships with comments

// Set pagination options
paginate JobHistory, Employee with infinite-scroll
paginate Job with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
enum PropertyStatus {FIN, CON, UA} 
enum PropertyCondition{ NEW, OLD} 
enum MediaType {AUDIO, VIDEO, IMAGE, GIF} 
enum SalesType { SALES, RENTAL, BOTH} 
enum SalesStatus { SOLD, AVAILABLE, EXPIRED, REMOVED } 


entity Attribute{
 name String, 
description String
}
entity Category {
name String, 
description String 
}
entity Property {
area Double, 
description String, 

 }
entity Language { 
name String, 
code String 
}
entity Country {
name String 
}
entity City { 
name String 
}
entity Address {
name String 
 }
entity AttributeValue {
value String, 
description String 
 }
entity Media {
type MediaType, 
location String, 
fileName String, 
extention String, 
default Boolean, 
description String 
 }
entity Customer { 
name String, 
dob Instant 
}
entity Business {
name String, 
year Instant 
 }
entity Account{ 
username String, 
password String, 
dateCreated Instant 
}
entity Privilege { }
entity SalesProperty {
datePosted Instant, 
expiryDate Instant, 
type SalesType, 
status SalesStatus, 
defaultPrice Double
 }
entity PropertyPricing {
defaultPrice Double, 
currentPrice Double, 
description String 
 }
entity PropertyGroup { 
groupName String, 
description String
}
relationship  OneToMany{ 
Category{attribute} to Attribute{category} 
} 
relationship OneToMany {
Attribute{attributeValue} to AttributeValue{attribute}
 }
relationship  OneToMany{
Category{property} to Property{category}
 } 
relationship OneToMany { 
Category{parent} to Category{children}
}
relationship  OneToMany{ 
Property{attributeValue} to AttributeValue{property}
} 
relationship  OneToOne{ 
Property{salesProperty} to SalesProperty{property}
}
relationship OneToMany { 
Customer{account } to Account{customer}
} 
relationship OneToMany { 
Account{salesProperty} to SalesProperty{account}
}
